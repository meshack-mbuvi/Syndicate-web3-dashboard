import { CollectiveFormDesign } from '@/components/collectives/create/design';
import { CollectivesGeneratedArtwork } from '@/components/collectives/generatedArtwork';
import {
  NFTMediaType,
  NFTPreviewer
} from '@/components/collectives/nftPreviewer';
import {
  useCreateState,
  useUpdateState
} from '@/hooks/collectives/useCreateCollective';
import { FC, useEffect, useState } from 'react';
import { CreateCollectiveTitle, createHeader } from '../shared';

interface Props {
  handleNext: (e: any) => void;
  setNextBtnDisabled: (disabled: boolean) => void;
  captureArtworkRef: any;
  activeIndex?: number;
  hideParticlesEngine?: boolean;
}

const CreateCollectiveDesign: FC<Props> = ({
  handleNext,
  setNextBtnDisabled,
  captureArtworkRef,
  activeIndex,
  hideParticlesEngine = false
}) => {
  const { name, symbol, artwork, artworkUrl, artworkType, description } =
    useCreateState();
  const {
    handleNameChange,
    handleTokenSymbolChange,
    handleDescriptionChange,
    handleCancelUpload,
    handleFileUpload,
    handleCreateGeneratedArtwork,
    handleCaptureGeneratedArtwork,
    setContinueButtonActive,
    ContinueButtonActive,
    progressPercent,
    fileName,
    exceededUploadLimit
  } = useUpdateState();

  const [uploadSuccessText] = useState('');

  useEffect(() => {
    if (
      name.trim() &&
      (artworkUrl || artworkType === NFTMediaType.CUSTOM) &&
      description.trim() &&
      symbol &&
      !exceededUploadLimit
    ) {
      setContinueButtonActive(true);
      setNextBtnDisabled(false);
      return;
    }
    setContinueButtonActive(false);
    setNextBtnDisabled(true);
  }, [
    name,
    symbol,
    artworkUrl,
    artworkType,
    description,
    exceededUploadLimit,
    activeIndex
  ]);

  return (
    <div>
      <CreateCollectiveTitle screen={createHeader.DESIGN} />
      <CollectiveFormDesign
        nameValue={name}
        handleNameChange={handleNameChange}
        tokenSymbolValue={symbol}
        handleTokenSymbolChange={handleTokenSymbolChange}
        descriptionValue={description}
        handleDescriptionChange={handleDescriptionChange}
        isContinueButtonActive={ContinueButtonActive}
        handleContinue={handleNext}
        handleUpload={handleFileUpload}
        uploadSuccessText={uploadSuccessText}
        uploadErrorText={exceededUploadLimit}
        handleCancelUpload={handleCancelUpload}
        progressPercentage={progressPercent}
        fileName={fileName}
        acceptFileTypes={'.png, .jpg, .jpeg, .gif, .mp4'}
        isUsingGeneratedArtwork={artworkType === NFTMediaType.CUSTOM}
        generatedArtworkBackgroundColor={artwork.backgroundColorClass}
        handleCreateGeneratedArtwork={handleCreateGeneratedArtwork}
        handleCaptureGeneratedArtwork={handleCaptureGeneratedArtwork}
        captureArtworkRef={captureArtworkRef}
        hideParticlesEngine={hideParticlesEngine}
      />
    </div>
  );
};

export default CreateCollectiveDesign;

export const DesignRightPanel: FC<{ customId?: string }> = ({ customId }) => {
  const { artworkType, artwork, artworkUrl, name, description, symbol } =
    useCreateState();

  const shouldUseGeneratedArtwork = artworkType === NFTMediaType.CUSTOM;

  return (
    <NFTPreviewer
      description={description}
      loading={{
        description: description === '',
        name: name === '',
        artwork: artworkUrl === ''
      }}
      mediaSource={
        shouldUseGeneratedArtwork ? (
          <CollectivesGeneratedArtwork
            label={name}
            backgroundColorClass={artwork.backgroundColorClass}
            customId={customId ? customId : 'particles-js-1'}
          />
        ) : (
          artworkUrl
        )
      }
      showAutoGeneratedArtDisclaimer={true}
      mediaType={artworkType}
      name={name}
      symbol={'âœº' + symbol}
      customClasses={
        'w-full bg-black relative transform left-1/2 -translate-x-1/2 md:mt-16 w-355 max-w-355'
      }
    />
  );
};
