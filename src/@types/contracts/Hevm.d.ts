/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js';
import { EventData, PastEventOptions } from 'web3-eth-contract';

export interface HevmContract extends Truffle.Contract<HevmInstance> {
  'new'(meta?: Truffle.TransactionDetails): Promise<HevmInstance>;
}

type AllEvents = never;

export interface HevmInstance extends Truffle.ContractInstance {
  ffi: {
    (arg0: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      arg0: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      arg0: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  roll: {
    (x: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  store: {
    (
      c: string,
      loc: string,
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      c: string,
      loc: string,
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      c: string,
      loc: string,
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      c: string,
      loc: string,
      val: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  warp: {
    (x: number | BN | string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    ffi: {
      (arg0: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        arg0: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        arg0: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    roll: {
      (
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    store: {
      (
        c: string,
        loc: string,
        val: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        c: string,
        loc: string,
        val: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        c: string,
        loc: string,
        val: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        c: string,
        loc: string,
        val: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    warp: {
      (
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        x: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
