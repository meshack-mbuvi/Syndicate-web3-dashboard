/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SyndicateClosedEndFundDepositLogicV0Contract
  extends Truffle.Contract<SyndicateClosedEndFundDepositLogicV0Instance> {
  "new"(
    owner: string,
    storeAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SyndicateClosedEndFundDepositLogicV0Instance>;
}

export interface DepositAdded {
  name: "DepositAdded";
  args: {
    syndicateAddress: string;
    memberAddress: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface DepositMemberMaxUpdated {
  name: "DepositMemberMaxUpdated";
  args: {
    syndicateAddress: string;
    depositMemberMax: BN;
    0: string;
    1: BN;
  };
}

export interface DepositMemberMinUpdated {
  name: "DepositMemberMinUpdated";
  args: {
    syndicateAddress: string;
    depositMemberMin: BN;
    0: string;
    1: BN;
  };
}

export interface DepositOverridden {
  name: "DepositOverridden";
  args: {
    syndicateAddress: string;
    memberAddress: string;
    value: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface DepositRemoved {
  name: "DepositRemoved";
  args: {
    syndicateAddress: string;
    memberAddress: string;
    amount: BN;
    actor: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface DepositTotalMaxUpdated {
  name: "DepositTotalMaxUpdated";
  args: {
    syndicateAddress: string;
    depositTotalMax: BN;
    0: string;
    1: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SyndicateFeeAddressUpdated {
  name: "SyndicateFeeAddressUpdated";
  args: {
    contractFeeAddress: string;
    0: string;
  };
}

type AllEvents =
  | DepositAdded
  | DepositMemberMaxUpdated
  | DepositMemberMinUpdated
  | DepositOverridden
  | DepositRemoved
  | DepositTotalMaxUpdated
  | OwnershipTransferred
  | SyndicateFeeAddressUpdated;

export interface SyndicateClosedEndFundDepositLogicV0Instance
  extends Truffle.ContractInstance {
  BASIS_POINTS_DENOMINATOR(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
   * getter function for syndicate fee address.
   */
  getSyndicateFeeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Renounce ownership of the contract
   */
  ownerRenounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * set a new fee address for the contract function that can only be triggered by the contract owner.
   * @param feeAddress The owner's new contract fee address
   */
  ownerSetSyndicateFeeAddress: {
    (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership to the provided address.
   * @param newOwner The new owner's address.
   */
  ownerTransferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the minimum deposit per wallet address. This is the minimum that a single member can contribute to the Syndicate
   * @param depositMemberMin The minimum deposit amount per member. Must not exceed the current `depositMemberMax`.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetDepositMemberMin: {
    (
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the maximum deposit per wallet address. This is the maximum that a single member can contribute to the Syndicate
   * @param depositMemberMax The maximum deposit amount per user. Must be at least the current `depositMemberMin`, and cannot exceed the current `depositTotalMax`.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetDepositMemberMax: {
    (
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the maximum total deposit amount. This is the maximum that all members combined can contribute to the Syndicate`depositTotalMax` is not required to be at least `depositTotal`. Setting `depositTotalMax` to be less than `depositTotal` can be thought of as a simple way to cut off deposits if the Syndicate has grown too large.
   * @param depositTotalMax The maximum total number of deposits. Must be at least the current `depositMemberMax`.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetDepositTotalMax: {
    (
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * The member's deposit is associated with the address of `msg. sender`. The member can later transfer their deposit (and therefore their ownership stake) to another address if the manager has set the Syndicate as `transferable`.
   * Used by a member to make a deposit to an open Syndicate.If a manager is issuing a Syndicate under SEC Rule 506(b) of Regulation D, a manager should only add a member's address(es) to the allowlist if the member attests that they are an accredited investor. This is also highlighted in the web interface, but it is not a requirement of the smart contract since not all Syndicates are securities, nor are all Syndicates that are securities necessarily 506(b) offerings (they could be 506(c) offerings for example).Under Rule 506(b), up to 35 non-accredited investors can invest in a private placement. These non-accredited investors must have sufficient knowledge and experience, which is difficult to verify in a decentralized context. As a result, we leave it up to the Syndicate manager to track their own list of up to 35 non-accredited investors and add them to the allowlist. The Syndicate manager must provide disclosures to non-accredited investors that comply with Regulation A offerings, give non-accredited investors financial statement information specified in Rule 506, and be available to answer questions from potential members who are non-accredited investors. This responsibility rests with the Syndicate manager. See https://www.sec.gov/smallbusiness/exemptofferings/rule506bNothing in this documentation should be considered legal advice. If you are seeking any clarification, please email us at hello[at]syndicateprotocol.org.
   * @param amount The amount to be transferred from the member's wallet, valued in the Syndicate's deposit ERC20 token
   * @param syndicateAddress The Syndicate that a member is depositing to
   */
  memberDeposit: {
    (
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to reject a member's deposit
   * @param memberAddresses The members whose WHOLE contribution is being returned
   * @param syndicateAddress The Syndicate that the member deposited in
   */
  managerRejectDepositForMembers: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to manually adjust the deposit amount for multiple member address (e.g. in response to off-chain transactions). This function **does not** enforce constraints on `depositMemberMin`, `depositMemberMax`, `depositTotalMax`, or `numMembersMax`. However, it **does** update bookkeeping of `depositTotal` and `numMembersCurrent`.This function can only be called if the Syndicate is modifiable. The modifiable boolean is set by the manager on creation and cannot be changed after the Syndicate is created.This function can only be called before distributions have been enabled (though the Syndicate may be closed to deposits). If distributions have already been enabled, then changing deposit amounts could affect the ownership share of unclaimed distributions and create significant problems for other members.
   * @param amounts The new deposit amount to be set for the corresponding index in the memberAddresses array. These arrays must be the same length. Note that the new amount completely replaces the prior deposit amount for the member. It does not add or subtract from it.
   * @param memberAddresses The addresses of the member whose deposit is being adjusted
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetDepositForMembers: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    BASIS_POINTS_DENOMINATOR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
     * getter function for syndicate fee address.
     */
    getSyndicateFeeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Renounce ownership of the contract
     */
    ownerRenounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * set a new fee address for the contract function that can only be triggered by the contract owner.
     * @param feeAddress The owner's new contract fee address
     */
    ownerSetSyndicateFeeAddress: {
      (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership to the provided address.
     * @param newOwner The new owner's address.
     */
    ownerTransferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the minimum deposit per wallet address. This is the minimum that a single member can contribute to the Syndicate
     * @param depositMemberMin The minimum deposit amount per member. Must not exceed the current `depositMemberMax`.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetDepositMemberMin: {
      (
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the maximum deposit per wallet address. This is the maximum that a single member can contribute to the Syndicate
     * @param depositMemberMax The maximum deposit amount per user. Must be at least the current `depositMemberMin`, and cannot exceed the current `depositTotalMax`.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetDepositMemberMax: {
      (
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the maximum total deposit amount. This is the maximum that all members combined can contribute to the Syndicate`depositTotalMax` is not required to be at least `depositTotal`. Setting `depositTotalMax` to be less than `depositTotal` can be thought of as a simple way to cut off deposits if the Syndicate has grown too large.
     * @param depositTotalMax The maximum total number of deposits. Must be at least the current `depositMemberMax`.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetDepositTotalMax: {
      (
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * The member's deposit is associated with the address of `msg. sender`. The member can later transfer their deposit (and therefore their ownership stake) to another address if the manager has set the Syndicate as `transferable`.
     * Used by a member to make a deposit to an open Syndicate.If a manager is issuing a Syndicate under SEC Rule 506(b) of Regulation D, a manager should only add a member's address(es) to the allowlist if the member attests that they are an accredited investor. This is also highlighted in the web interface, but it is not a requirement of the smart contract since not all Syndicates are securities, nor are all Syndicates that are securities necessarily 506(b) offerings (they could be 506(c) offerings for example).Under Rule 506(b), up to 35 non-accredited investors can invest in a private placement. These non-accredited investors must have sufficient knowledge and experience, which is difficult to verify in a decentralized context. As a result, we leave it up to the Syndicate manager to track their own list of up to 35 non-accredited investors and add them to the allowlist. The Syndicate manager must provide disclosures to non-accredited investors that comply with Regulation A offerings, give non-accredited investors financial statement information specified in Rule 506, and be available to answer questions from potential members who are non-accredited investors. This responsibility rests with the Syndicate manager. See https://www.sec.gov/smallbusiness/exemptofferings/rule506bNothing in this documentation should be considered legal advice. If you are seeking any clarification, please email us at hello[at]syndicateprotocol.org.
     * @param amount The amount to be transferred from the member's wallet, valued in the Syndicate's deposit ERC20 token
     * @param syndicateAddress The Syndicate that a member is depositing to
     */
    memberDeposit: {
      (
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to reject a member's deposit
     * @param memberAddresses The members whose WHOLE contribution is being returned
     * @param syndicateAddress The Syndicate that the member deposited in
     */
    managerRejectDepositForMembers: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to manually adjust the deposit amount for multiple member address (e.g. in response to off-chain transactions). This function **does not** enforce constraints on `depositMemberMin`, `depositMemberMax`, `depositTotalMax`, or `numMembersMax`. However, it **does** update bookkeeping of `depositTotal` and `numMembersCurrent`.This function can only be called if the Syndicate is modifiable. The modifiable boolean is set by the manager on creation and cannot be changed after the Syndicate is created.This function can only be called before distributions have been enabled (though the Syndicate may be closed to deposits). If distributions have already been enabled, then changing deposit amounts could affect the ownership share of unclaimed distributions and create significant problems for other members.
     * @param amounts The new deposit amount to be set for the corresponding index in the memberAddresses array. These arrays must be the same length. Note that the new amount completely replaces the prior deposit amount for the member. It does not add or subtract from it.
     * @param memberAddresses The addresses of the member whose deposit is being adjusted
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetDepositForMembers: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
