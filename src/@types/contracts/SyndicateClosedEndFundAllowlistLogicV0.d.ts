/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SyndicateClosedEndFundAllowlistLogicV0Contract
  extends Truffle.Contract<SyndicateClosedEndFundAllowlistLogicV0Instance> {
  "new"(
    owner: string,
    storeAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SyndicateClosedEndFundAllowlistLogicV0Instance>;
}

export interface AddressAllowed {
  name: "AddressAllowed";
  args: {
    syndicateAddress: string;
    memberAddress: string;
    0: string;
    1: string;
  };
}

export interface AddressBlocked {
  name: "AddressBlocked";
  args: {
    syndicateAddress: string;
    memberAddress: string;
    0: string;
    1: string;
  };
}

export interface AllowlistEnabledUpdated {
  name: "AllowlistEnabledUpdated";
  args: {
    syndicateAddress: string;
    allowlistEnabled: boolean;
    0: string;
    1: boolean;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SyndicateFeeAddressUpdated {
  name: "SyndicateFeeAddressUpdated";
  args: {
    contractFeeAddress: string;
    0: string;
  };
}

type AllEvents =
  | AddressAllowed
  | AddressBlocked
  | AllowlistEnabledUpdated
  | OwnershipTransferred
  | SyndicateFeeAddressUpdated;

export interface SyndicateClosedEndFundAllowlistLogicV0Instance
  extends Truffle.ContractInstance {
  BASIS_POINTS_DENOMINATOR(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
   * getter function for syndicate fee address.
   */
  getSyndicateFeeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Renounce ownership of the contract
   */
  ownerRenounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * set a new fee address for the contract function that can only be triggered by the contract owner.
   * @param feeAddress The owner's new contract fee address
   */
  ownerSetSyndicateFeeAddress: {
    (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership to the provided address.
   * @param newOwner The new owner's address.
   */
  ownerTransferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to turn the allowlist on or offThis setter can only be called when the Syndicate is open, as it only limits future deposits. To retroactively remove deposits that have been made by members who may not have been on the allowlist, a manager should use `managerRejectDepositForMember()`.
   * @param allowlistEnabled True if the Syndicate ONLY accepts deposits from allowed addresses. False if any (accredited) member can make a deposit.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetAllowlistEnabled: {
    (
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Allowing a single address costs 31527 in gas without an array and 32445 in gas with an array. This is a difference in cost of $0.17 at current gas prices, which is a worthwhile trade off considering that (a) allowing only one address will be less common than allowing multiple addresses and (b) having two different allowAddress functions poses a security risk if we forget to reconcile changes between them
   * Used by a manager to add an array of member addresses to the allowlist and emit an event to allow for easy searching.This function is only relevant when the manager has turned the allowlist on (`SyndicateValues.allowlistEnabled == true`). If the allowlist is off, anyone can make a deposit to the Syndicate without the manager specifically allowing their address.
   * @param memberAddresses An array of addresses to be allowed by the Syndicate
   * @param syndicateAddress The address of the Syndicate to accept the allowedAdresses
   */
  managerAllowAddresses: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to remove a previously-allowed member address from the allowlistThis function only proceeds when the allowlist is enabled, as it is ineffective to maintain a blocklist of possible member addresses. A manager who wishes to reverse a deposit into their fund should instead use `managerRejectDepositForMembers()`.Blocking a member address that has previously been allowed does not reject or return their prior deposits. The deposit is still kept in the syndicate.
   * @param memberAddresses The array of member addresses to remove.
   * @param syndicateAddress The address of the Syndicate that contains the allowlist
   */
  managerBlockAddresses: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    BASIS_POINTS_DENOMINATOR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
     * getter function for syndicate fee address.
     */
    getSyndicateFeeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Renounce ownership of the contract
     */
    ownerRenounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * set a new fee address for the contract function that can only be triggered by the contract owner.
     * @param feeAddress The owner's new contract fee address
     */
    ownerSetSyndicateFeeAddress: {
      (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership to the provided address.
     * @param newOwner The new owner's address.
     */
    ownerTransferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to turn the allowlist on or offThis setter can only be called when the Syndicate is open, as it only limits future deposits. To retroactively remove deposits that have been made by members who may not have been on the allowlist, a manager should use `managerRejectDepositForMember()`.
     * @param allowlistEnabled True if the Syndicate ONLY accepts deposits from allowed addresses. False if any (accredited) member can make a deposit.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetAllowlistEnabled: {
      (
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Allowing a single address costs 31527 in gas without an array and 32445 in gas with an array. This is a difference in cost of $0.17 at current gas prices, which is a worthwhile trade off considering that (a) allowing only one address will be less common than allowing multiple addresses and (b) having two different allowAddress functions poses a security risk if we forget to reconcile changes between them
     * Used by a manager to add an array of member addresses to the allowlist and emit an event to allow for easy searching.This function is only relevant when the manager has turned the allowlist on (`SyndicateValues.allowlistEnabled == true`). If the allowlist is off, anyone can make a deposit to the Syndicate without the manager specifically allowing their address.
     * @param memberAddresses An array of addresses to be allowed by the Syndicate
     * @param syndicateAddress The address of the Syndicate to accept the allowedAdresses
     */
    managerAllowAddresses: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to remove a previously-allowed member address from the allowlistThis function only proceeds when the allowlist is enabled, as it is ineffective to maintain a blocklist of possible member addresses. A manager who wishes to reverse a deposit into their fund should instead use `managerRejectDepositForMembers()`.Blocking a member address that has previously been allowed does not reject or return their prior deposits. The deposit is still kept in the syndicate.
     * @param memberAddresses The array of member addresses to remove.
     * @param syndicateAddress The address of the Syndicate that contains the allowlist
     */
    managerBlockAddresses: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
