/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISyndicateClosedEndFundProxyV0Contract
  extends Truffle.Contract<ISyndicateClosedEndFundProxyV0Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ISyndicateClosedEndFundProxyV0Instance>;
}

type AllEvents = never;

export interface ISyndicateClosedEndFundProxyV0Instance
  extends Truffle.ContractInstance {
  allowlist: {
    (
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  allowlistEnabled: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateDistributionShares: {
    (
      amount: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      amount: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: BN }>;
    sendTransaction(
      amount: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      amount: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  calculateEligibleDistribution: {
    (
      depositMember: number | BN | string,
      depositTotal: number | BN | string,
      distributionClaimedMember: number | BN | string,
      distributionTotal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      depositMember: number | BN | string,
      depositTotal: number | BN | string,
      distributionClaimedMember: number | BN | string,
      distributionTotal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      depositMember: number | BN | string,
      depositTotal: number | BN | string,
      distributionClaimedMember: number | BN | string,
      distributionTotal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      depositMember: number | BN | string,
      depositTotal: number | BN | string,
      distributionClaimedMember: number | BN | string,
      distributionTotal: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createSyndicate: {
    (
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  dateClose: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  dateCreated: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositERC20Address: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositMember: {
    (
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositMemberMax: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositMemberMin: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositTotal: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositTotalMax: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributing: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionClaimedMember: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionClaimedTotal: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionERC20Addresses: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributionTotal: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDistributionClaimedMember: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDistributionClaimedTotal: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDistributionTotal: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getDistributionUnclaimedMember: {
    (
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Address: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getManagerInfo: {
    (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMemberInfo: {
    (
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      deposit: BN;
      distributionClaimedDepositERC20: BN;
      isAllowlisted: boolean;
    }>;
    sendTransaction(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMetadata: {
    (
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getSyndicateValues: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      managerCurrent: string;
      managerPending: string;
      managerFeeAddress: string;
      managerManagementFeeBasisPoints: BN;
      managerDistributionShareBasisPoints: BN;
      syndicateDistributionShareBasisPoints: BN;
      numMembersMax: BN;
      numMembersCurrent: BN;
      depositERC20Address: string;
      depositMemberMin: BN;
      depositMemberMax: BN;
      depositTotalMax: BN;
      depositTotal: BN;
      dateCreated: BN;
      dateClose: BN;
      open: boolean;
      distributing: boolean;
      modifiable: boolean;
      allowlistEnabled: boolean;
      transferable: boolean;
    }>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerAllowAddresses: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerAssessManagementFee: {
    (
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerBlockAddresses: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerCloseSyndicate: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerCurrent: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerDistributionShareBasisPoints: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerEmitMemo: {
    (
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerFeeAddress: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerManagementFeeBasisPoints: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerPending: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerPendingConfirm: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerPendingConfirmAndSetManagerFeeAddress: {
    (
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerRejectDepositForMembers: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetAllowlistEnabled: {
    (
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      allowlistEnabled: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDateClose: {
    (
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDepositForMembers: {
    (
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDepositMemberMax: {
    (
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositMemberMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDepositMemberMin: {
    (
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositMemberMin: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDepositTotalMax: {
    (
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      depositTotalMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDistributions: {
    (
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetDistributionsClaimedForMembers: {
    (
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      distributionERC20Addresses: string[],
      memberAddresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetManagerFeeAddress: {
    (
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetManagerFees: {
    (
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetManagerPending: {
    (
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetMetadata: {
    (
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetNumMembersMax: {
    (
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetNumMembersMaxToCurrent: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetSyndicateDistributionShare: {
    (
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSetTransferable: {
    (
      syndicateAddress: string,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerSyndicate: {
    (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  managerTransferDepositForMembers: {
    (
      syndicateAddress: string,
      memberAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      memberAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  memberClaimDistributions: {
    (
      syndicateAddress: string,
      ERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      ERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      ERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      ERC20Addresses: string[],
      amounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  memberDeposit: {
    (
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  memberTransfer: {
    (
      syndicateAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      targetAddress: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  metadata: {
    (
      syndicateAddress: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  modifiable: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  notCloseable: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  numMembersCurrent: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  numMembersMax: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  open: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  syndicateDistributionShareBasisPoints: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  transferable: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    allowlist: {
      (
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    allowlistEnabled: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calculateDistributionShares: {
      (
        amount: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        amount: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{ 0: BN; 1: BN; 2: BN }>;
      sendTransaction(
        amount: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        amount: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    calculateEligibleDistribution: {
      (
        depositMember: number | BN | string,
        depositTotal: number | BN | string,
        distributionClaimedMember: number | BN | string,
        distributionTotal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        depositMember: number | BN | string,
        depositTotal: number | BN | string,
        distributionClaimedMember: number | BN | string,
        distributionTotal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        depositMember: number | BN | string,
        depositTotal: number | BN | string,
        distributionClaimedMember: number | BN | string,
        distributionTotal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        depositMember: number | BN | string,
        depositTotal: number | BN | string,
        distributionClaimedMember: number | BN | string,
        distributionTotal: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createSyndicate: {
      (
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    dateClose: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    dateCreated: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositERC20Address: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositMember: {
      (
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositMemberMax: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositMemberMin: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositTotal: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositTotalMax: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributing: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributionClaimedMember: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributionClaimedTotal: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributionERC20Addresses: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributionTotal: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDistributionClaimedMember: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDistributionClaimedTotal: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDistributionTotal: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getDistributionUnclaimedMember: {
      (
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Address: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getManagerInfo: {
      (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMemberInfo: {
      (
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        deposit: BN;
        distributionClaimedDepositERC20: BN;
        isAllowlisted: boolean;
      }>;
      sendTransaction(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMetadata: {
      (
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getSyndicateValues: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        managerCurrent: string;
        managerPending: string;
        managerFeeAddress: string;
        managerManagementFeeBasisPoints: BN;
        managerDistributionShareBasisPoints: BN;
        syndicateDistributionShareBasisPoints: BN;
        numMembersMax: BN;
        numMembersCurrent: BN;
        depositERC20Address: string;
        depositMemberMin: BN;
        depositMemberMax: BN;
        depositTotalMax: BN;
        depositTotal: BN;
        dateCreated: BN;
        dateClose: BN;
        open: boolean;
        distributing: boolean;
        modifiable: boolean;
        allowlistEnabled: boolean;
        transferable: boolean;
      }>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerAllowAddresses: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerAssessManagementFee: {
      (
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerBlockAddresses: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerCloseSyndicate: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerCurrent: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerDistributionShareBasisPoints: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerEmitMemo: {
      (
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerFeeAddress: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerManagementFeeBasisPoints: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerPending: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerPendingConfirm: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerPendingConfirmAndSetManagerFeeAddress: {
      (
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerRejectDepositForMembers: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetAllowlistEnabled: {
      (
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        allowlistEnabled: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDateClose: {
      (
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDepositForMembers: {
      (
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDepositMemberMax: {
      (
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositMemberMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDepositMemberMin: {
      (
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositMemberMin: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDepositTotalMax: {
      (
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        depositTotalMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDistributions: {
      (
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetDistributionsClaimedForMembers: {
      (
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        distributionERC20Addresses: string[],
        memberAddresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetManagerFeeAddress: {
      (
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetManagerFees: {
      (
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetManagerPending: {
      (
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetMetadata: {
      (
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetNumMembersMax: {
      (
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetNumMembersMaxToCurrent: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetSyndicateDistributionShare: {
      (
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSetTransferable: {
      (
        syndicateAddress: string,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerSyndicate: {
      (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    managerTransferDepositForMembers: {
      (
        syndicateAddress: string,
        memberAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        memberAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    memberClaimDistributions: {
      (
        syndicateAddress: string,
        ERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        ERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        ERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        ERC20Addresses: string[],
        amounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    memberDeposit: {
      (
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    memberTransfer: {
      (
        syndicateAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        targetAddress: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    metadata: {
      (
        syndicateAddress: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    modifiable: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    notCloseable: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    numMembersCurrent: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    numMembersMax: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    open: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    syndicateDistributionShareBasisPoints: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    transferable: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
