/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISyndicateIntegrationsCoordinatorLogicV0Contract
  extends Truffle.Contract<ISyndicateIntegrationsCoordinatorLogicV0Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ISyndicateIntegrationsCoordinatorLogicV0Instance>;
}

type AllEvents = never;

export interface ISyndicateIntegrationsCoordinatorLogicV0Instance
  extends Truffle.ContractInstance {
  getAddresses: {
    (contractNames: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      contractNames: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string[]>;
    sendTransaction(
      contractNames: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractNames: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  addOrUpdateContracts: {
    (
      contractNames: string[],
      addresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      contractNames: string[],
      addresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractNames: string[],
      addresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractNames: string[],
      addresses: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  removeContract: {
    (contractName: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      contractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      contractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      contractName: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getAddresses: {
      (
        contractNames: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractNames: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string[]>;
      sendTransaction(
        contractNames: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractNames: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    addOrUpdateContracts: {
      (
        contractNames: string[],
        addresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        contractNames: string[],
        addresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractNames: string[],
        addresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractNames: string[],
        addresses: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    removeContract: {
      (contractName: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        contractName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        contractName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        contractName: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
