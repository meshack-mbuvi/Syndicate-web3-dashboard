/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SyndicateClosedEndFundManagerLogicV0Contract
  extends Truffle.Contract<SyndicateClosedEndFundManagerLogicV0Instance> {
  "new"(
    owner: string,
    storeAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SyndicateClosedEndFundManagerLogicV0Instance>;
}

export interface DateCloseUpdated {
  name: "DateCloseUpdated";
  args: {
    syndicateAddress: string;
    dateClose: BN;
    0: string;
    1: BN;
  };
}

export interface ManagementFeeAssessed {
  name: "ManagementFeeAssessed";
  args: {
    syndicateAddress: string;
    managementFeeAmount: BN;
    0: string;
    1: BN;
  };
}

export interface ManagerFeeAddressUpdated {
  name: "ManagerFeeAddressUpdated";
  args: {
    syndicateAddress: string;
    managerFeeAddress: string;
    0: string;
    1: string;
  };
}

export interface ManagerFeesUpdated {
  name: "ManagerFeesUpdated";
  args: {
    syndicateAddress: string;
    managerManagementFeeBasisPoints: BN;
    managerDistributionShareBasisPoints: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface MemoEmitted {
  name: "MemoEmitted";
  args: {
    syndicateAddress: string;
    managerCurrent: string;
    hexadecimalHash: string;
    hashFunction: BN;
    hashSize: BN;
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
  };
}

export interface MetadataUpdated {
  name: "MetadataUpdated";
  args: {
    syndicateAddress: string;
    metadataKey: string;
    metadataValue: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NewManagerConfirmed {
  name: "NewManagerConfirmed";
  args: {
    syndicateAddress: string;
    oldManager: string;
    newManager: string;
    0: string;
    1: string;
    2: string;
  };
}

export interface NewManagerNominated {
  name: "NewManagerNominated";
  args: {
    syndicateAddress: string;
    managerPendingAddress: string;
    0: string;
    1: string;
  };
}

export interface NumMembersMaxUpdated {
  name: "NumMembersMaxUpdated";
  args: {
    syndicateAddress: string;
    numMembersMax: BN;
    numMembersCurrent: BN;
    0: string;
    1: BN;
    2: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SyndicateClosed {
  name: "SyndicateClosed";
  args: {
    syndicateAddress: string;
    0: string;
  };
}

export interface SyndicateCreated {
  name: "SyndicateCreated";
  args: {
    syndicateAddress: string;
    managerManagementFeeBasisPoints: BN;
    managerDistributionShareBasisPoints: BN;
    syndicateDistributionShareBasisPoints: BN;
    numMembersMax: BN;
    depositERC20Address: string;
    depositMemberMin: BN;
    depositMemberMax: BN;
    depositTotalMax: BN;
    dateCreated: BN;
    dateClose: BN;
    modifiable: boolean;
    allowlistEnabled: boolean;
    transferable: boolean;
    0: string;
    1: BN;
    2: BN;
    3: BN;
    4: BN;
    5: string;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
    10: BN;
    11: boolean;
    12: boolean;
    13: boolean;
  };
}

export interface SyndicateDistributionShareUpdated {
  name: "SyndicateDistributionShareUpdated";
  args: {
    syndicateAddress: string;
    syndicateDistributionShareBasisPoints: BN;
    0: string;
    1: BN;
  };
}

export interface SyndicateFeeAddressUpdated {
  name: "SyndicateFeeAddressUpdated";
  args: {
    contractFeeAddress: string;
    0: string;
  };
}

type AllEvents =
  | DateCloseUpdated
  | ManagementFeeAssessed
  | ManagerFeeAddressUpdated
  | ManagerFeesUpdated
  | MemoEmitted
  | MetadataUpdated
  | NewManagerConfirmed
  | NewManagerNominated
  | NumMembersMaxUpdated
  | OwnershipTransferred
  | SyndicateClosed
  | SyndicateCreated
  | SyndicateDistributionShareUpdated
  | SyndicateFeeAddressUpdated;

export interface SyndicateClosedEndFundManagerLogicV0Instance
  extends Truffle.ContractInstance {
  BASIS_POINTS_DENOMINATOR(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
   * getter function for syndicate fee address.
   */
  getSyndicateFeeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Renounce ownership of the contract
   */
  ownerRenounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * set a new fee address for the contract function that can only be triggered by the contract owner.
   * @param feeAddress The owner's new contract fee address
   */
  ownerSetSyndicateFeeAddress: {
    (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership to the provided address.
   * @param newOwner The new owner's address.
   */
  ownerTransferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Creates a Syndicate with the address of `msg.sender` and initializes `msg.sender` as the Syndicate manager.The `msg.sender` address calling `createSyndicate()` becomes permanently associated with the Syndicate. Transferring management of the Syndicate later will change the `managerCurrent` and the address at which deposits are received, but will NOT change the `syndicateAddress`, which permanently identifies the fund.Syndicate does **not** support tokens that rebalance (e.g. Ampleforth). This is because Syndicate requires that the deposit token's units are constant.For tokens that take fees, Syndicate uses the after-fee amounts for recording deposits and the before-fee amounts for recording withdrawals.
   * @param allowlistEnabled True if the Syndicate ONLY allows deposits from allowed addresses. False if any (accredited) member can deposit.
   * @param dateClose The date at which the Syndicate is scheduled to stop receiving deposits, in UNIX time. Will be updated to the actual close date if the Syndicate is manually closed before this date is reached.
   * @param depositERC20Address The address of the ERC20 contract tracking deposits to the Syndicate. A stablecoin is strongly recommended-- especially for funds that are open for an extended period of time--since this is used to calculate ownership, and fluctuations in value can affect these ownership calculations.
   * @param depositMemberMax The maximum amount (of the deposit ERC20) that a single address can deposit.
   * @param depositMemberMin The minimum amount (of the deposit ERC20) that a single address can deposit.
   * @param depositTotalMax The maximum amount that can be deposited to the Syndicate overall, e.g. an investment target.
   * @param managerDistributionShareBasisPoints The portion of the Syndicate's distributions that will be allocated to the manager. The fee amount must be entered in basis points: for example, a distribution share of 20% of all distributions would be passed in as 2000 basis points. This is displayed in the UI as "Performance Fee to Syndicate Lead" on the Create Syndicate page.
   * @param managerManagementFeeBasisPoints The manager fee assessed when the manager calls `managerAssessManagementFee`. In the future, this will be automatically assessed yearly. The fee amount must be entered in basis points: for example, a management fee of 2% per year would be passed in as 200 basis points because the fees are adjusted by `BASIS_POINTS_DENOMINATOR`, which is set to 10000. This is displayed in the UI as "Expected Annual Operating Fees" on the Create Syndicate page.
   * @param modifiable True if a manager can manually modify members' deposit and distribution amounts. False if these values can only be altered by the contract deposit and withdrawal functions. A manager may wish to manually modify these values to reconcile off-chain agreements (e.g. advisory shares, which do not have a deposit associated with them) or to correct for user error (for example, a user sends their deposit to the manager's wallet directly instead of using the smart contract). This choice is permanent--once set at creation, it cannot be changed. True is recommended for smaller syndicates where every member trusts the manager, or for cases where a Syndicate is used as a cap table to track ownership agreements without necessarily exchanging deposits. False is recommended for large Syndicates where the members may desire more transparency, or if a smart contract is being used in place of a manager's wallet and trustless operation is desired.
   * @param numMembersMax The maximum number of members that can make deposits to the Syndicate
   * @param syndicateDistributionShareBasisPoints The portion of the Syndicate's distributions that will be sent to the Syndicate treasury. The fee amount must be entered in basis points: for example, the minimum distribution share of 0.50% would be passed in as 50 basis points.
   * @param transferable True if a member can initiate a transfer of all or a portion of their deposit to another address before the Syndicate begins distributing. Member-initiated transfers may have regulatory concerns (e.g. by allowing a transfer to a non-accredited investor), while manager-initiated transfers are safe for internal bookkeeping purposes. A manager's ability to initiate a transfer is determined by `modifiable` and is independent to `transferable`. True is recommended for Syndicates that want to grant greater control over holdings to its members. False is recommended for Syndicates that are under external regulations that make ownership transfers legally problematic and require manager oversight.
   */
  createSyndicate: {
    (
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      numMembersMax: number | BN | string,
      depositERC20Address: string,
      depositMemberMin: number | BN | string,
      depositMemberMax: number | BN | string,
      depositTotalMax: number | BN | string,
      dateClose: number | BN | string,
      modifiable: boolean,
      allowlistEnabled: boolean,
      transferable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by the current manager to nominate a new managerThe new manager will be pending until they call `managerPendingConfirm()`. This ensures that they have control over their wallet and actively agree to manage the fund.Changing a manager does not change the `syndicateAddress`. The `syndicateAddress` is permanent but has no effect beyond acting as an identifier.To reset a `managerPending` request, just set the `managerPending` to be `address(0)`. This is the default value for all addresses.
   * @param managerPendingAddress The address of the new manager
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetManagerPending: {
    (
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerPendingAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This is a helper function that can be used by a pending manager to simultaneously confirm management of a Syndicate and update the manager fee address. This ensures that there is no gap in setting a new fee address after taking ownership of a Syndicate.
   * @param managerFeeAddress The address where manager fees should be sent.
   * @param syndicateAddress The address of the Syndicate.
   */
  managerPendingConfirmAndSetManagerFeeAddress: {
    (
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by the pending manager to claim current manager statusThe pending manager is identified by `msg.sender`, which proves that they have control over their addressChanging a manager does not change the syndicateAddress. The syndicateAddress is permanent but has no effect beyond acting as an identifier.
   * @param syndicateAddress The address of the Syndicate
   */
  managerPendingConfirm: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to set the address where fees should be sent
   * @param managerFeeAddress The address where manager fees should be sent. This cannot be the current or pending Syndicate manager
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetManagerFeeAddress: {
    (
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerFeeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * In the future, we will include a timelock on all changes to raise fees. Since the current architecture requires trust in a manager because the manager holds the funds, this risk is one that we are willing to accept in the short-term.For the current version of this contract, the management fee must be assessed manually by `managerAssessManagementFee()`. In the future, the management fee will be automatically assessed yearly (or another specified time interval) at the rate specified by `managerManagementFeeBasisPoints` once we support asset management via smart contracts.
   * Used by a manager to set their management and distribution sharesBasis points are fractional units of `store. BASIS_POINTS_DENOMINATOR()` (set to 10000). This means that the max precision of any distribution share is 0.01% (1 basis point).A standard structure would be a 2% management fee (200 basis points) and a 20% distribution share (2000 basis points). For more info, see https://www.investopedia.com/terms/t/two_and_twenty.aspManager fee INCREASES are only accepted while the Syndicate is open; after the Syndicate is closed, fees can only be decreased. This is to prevent managers from changing fees on members without giving them recourse to act on those fee changes (i.e. the opportunity to revoke their deposit).
   * @param managerDistributionShareBasisPoints The percentage of the Syndicate's distributions that will be allocated to the manager. The fee amount must be entered in basis points: for example, a performance fee of 20% of all distributions would be passed in as 2000 basis points.
   * @param managerManagementFeeBasisPoints The management fee of a Syndicate manager, received when the manager calls `managerAssessManagementFee`. In the future, this will be automatically assessed yearly. The fee amount must be passed in basis points: for example, a management fee of 2% per year would be passed in as 200 basis points because the fees are adjusted by BASIS_POINTS_DENOMINATOR, which is set to 10000.
   * @param syndicateAddress The address of the Syndicate to set fees for
   */
  managerSetManagerFees: {
    (
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      managerManagementFeeBasisPoints: number | BN | string,
      managerDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to set Syndicate's distribution shareThe Syndicate distribution share must be at least 0.50% (50 basis points) and at most 100% (10000 basis points) - the manager's distribution share.
   * @param syndicateAddress The address of the Syndicate to set fees for
   * @param syndicateDistributionShareBasisPoints The distributino share that is sent to the Syndicate treasury. All distribution shares are entered in basis points, or fractional units of the BASIS_POINTS_DENOMINATOR (set to 10000). For example, the minimum distribution share of 0.50% should be passed in as 50 basis points (since it is 0.50% * 10000). This means that the max precision is 0.01% (1 basis point).
   */
  managerSetSyndicateDistributionShare: {
    (
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      syndicateDistributionShareBasisPoints: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This function is purely for transparency. A manager could also assess a management fee by transferring assets directly from the manager's wallet to the management fee address, but that can be seen as less transparent because no event is emitted via the Syndicate contract.This management fee currently does **not** leverage `managerManagementFeeBasisPoints` in any way. For now, the manager should calculate and assess the management fee manually based on their agreement with members. In the future, once we have asset management built into our contract, we can assess management fees automatically every year (or other specified time interval).Assessed management fees are not stored in the contract and should instead be reconstructed from the events
   * Used by a manager to assess a management fee. This can be used to compensate a manager (in addition to the distribution share, which is triggered automatically) or to pay expenses for a Syndicate.
   * @param amount The management fee that should be deducted from the Syndicate's holdings of the specified token. Note that this management fee is a specific amount, not a percentage.
   * @param syndicateAddress The address of the Syndicate
   */
  managerAssessManagementFee: {
    (
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      feeERC20Address: string,
      amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Set the maximum members that can contribute to the Syndicate
   * @param numMembersMax The maximum number of members
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetNumMembersMax: {
    (
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      numMembersMax: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This is a helper function that can be used by a manager to freeze deposits from new members (allowing only supplemental deposits from current members) while allowing replacements if existing members drop out.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetNumMembersMaxToCurrent: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to change the close date of a Syndicate.After `dateClose`, member deposits and withdrawals are disabled, but the manager can still reject member deposits or override member deposits (in the case of a modifiable Syndicate). However, distributions cannot be claimed until the Syndicate is closed by a call to `managerCloseSyndicate()`.Until the manager closes the Syndicate to enable distributions, `dateClose` can be pushed into the future, which will reallow member deposits and withdrawals.
   * @param dateClose The new close date, which must be in the future.
   * @param syndicateAddress The address of the Syndicate
   */
  managerSetDateClose: {
    (
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      dateClose: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Closing a Syndicate updates the dateClose to `block.timestamp`. This can be used for calculating management fees or determining how long the Syndicate has been in distribution.
   * Used by a manager to close a Syndicate to new deposits.A Syndicate must be closed before distributions can be enabled. Further, once a Syndicate is closed, it cannot be opened again. This is to prevent issues with redeeming distributions interacting with new deposits (e.g. a user with a 10% stake performs a withdrawal, and then a deposit occurs that dilutes them down to a 1% stake. From that point onward, they would only be entitled to 1% of the distributions).
   * @param syndicateAddress The address of the Syndicate
   */
  managerCloseSyndicate: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Used by a manager to store values within the structThe index of each key must be the same as the index of each value
   * @param metadataKeys The array of keys to store and access the metadata
   * @param metadataValues The arrays of values for metadata to be set
   */
  managerSetMetadata: {
    (
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      metadataKeys: string[],
      metadataValues: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * While testing pre-pend 0x on the first of the hash. That's because the value has to be 32 bytes long in the new layout, like: 0x6c00000000000000000000000000000000000000000000000000000000000000 For More info see https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32
   * Emit an event that references a memo stored as 64 byte hash.IPFS is recommended. Opted for the `SHA256` hash.This can be used to store a fund thesis or describe a transaction that a fund manager made in their wallet. This provides transparency by notifying members of transactions and allowing them to verify the proper use of funds.
   * @param hashFunction The hash function being used ie 0x20, 256-bits long
   * @param hashSize The hash size being used in our case 32 bytes
   * @param hexadecimalHash Hexadecimal hash
   * @param syndicateAddress The address of the Syndicate
   */
  managerEmitMemo: {
    (
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      hexadecimalHash: string,
      hashFunction: number | BN | string,
      hashSize: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    BASIS_POINTS_DENOMINATOR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
     * getter function for syndicate fee address.
     */
    getSyndicateFeeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Renounce ownership of the contract
     */
    ownerRenounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * set a new fee address for the contract function that can only be triggered by the contract owner.
     * @param feeAddress The owner's new contract fee address
     */
    ownerSetSyndicateFeeAddress: {
      (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership to the provided address.
     * @param newOwner The new owner's address.
     */
    ownerTransferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Creates a Syndicate with the address of `msg.sender` and initializes `msg.sender` as the Syndicate manager.The `msg.sender` address calling `createSyndicate()` becomes permanently associated with the Syndicate. Transferring management of the Syndicate later will change the `managerCurrent` and the address at which deposits are received, but will NOT change the `syndicateAddress`, which permanently identifies the fund.Syndicate does **not** support tokens that rebalance (e.g. Ampleforth). This is because Syndicate requires that the deposit token's units are constant.For tokens that take fees, Syndicate uses the after-fee amounts for recording deposits and the before-fee amounts for recording withdrawals.
     * @param allowlistEnabled True if the Syndicate ONLY allows deposits from allowed addresses. False if any (accredited) member can deposit.
     * @param dateClose The date at which the Syndicate is scheduled to stop receiving deposits, in UNIX time. Will be updated to the actual close date if the Syndicate is manually closed before this date is reached.
     * @param depositERC20Address The address of the ERC20 contract tracking deposits to the Syndicate. A stablecoin is strongly recommended-- especially for funds that are open for an extended period of time--since this is used to calculate ownership, and fluctuations in value can affect these ownership calculations.
     * @param depositMemberMax The maximum amount (of the deposit ERC20) that a single address can deposit.
     * @param depositMemberMin The minimum amount (of the deposit ERC20) that a single address can deposit.
     * @param depositTotalMax The maximum amount that can be deposited to the Syndicate overall, e.g. an investment target.
     * @param managerDistributionShareBasisPoints The portion of the Syndicate's distributions that will be allocated to the manager. The fee amount must be entered in basis points: for example, a distribution share of 20% of all distributions would be passed in as 2000 basis points. This is displayed in the UI as "Performance Fee to Syndicate Lead" on the Create Syndicate page.
     * @param managerManagementFeeBasisPoints The manager fee assessed when the manager calls `managerAssessManagementFee`. In the future, this will be automatically assessed yearly. The fee amount must be entered in basis points: for example, a management fee of 2% per year would be passed in as 200 basis points because the fees are adjusted by `BASIS_POINTS_DENOMINATOR`, which is set to 10000. This is displayed in the UI as "Expected Annual Operating Fees" on the Create Syndicate page.
     * @param modifiable True if a manager can manually modify members' deposit and distribution amounts. False if these values can only be altered by the contract deposit and withdrawal functions. A manager may wish to manually modify these values to reconcile off-chain agreements (e.g. advisory shares, which do not have a deposit associated with them) or to correct for user error (for example, a user sends their deposit to the manager's wallet directly instead of using the smart contract). This choice is permanent--once set at creation, it cannot be changed. True is recommended for smaller syndicates where every member trusts the manager, or for cases where a Syndicate is used as a cap table to track ownership agreements without necessarily exchanging deposits. False is recommended for large Syndicates where the members may desire more transparency, or if a smart contract is being used in place of a manager's wallet and trustless operation is desired.
     * @param numMembersMax The maximum number of members that can make deposits to the Syndicate
     * @param syndicateDistributionShareBasisPoints The portion of the Syndicate's distributions that will be sent to the Syndicate treasury. The fee amount must be entered in basis points: for example, the minimum distribution share of 0.50% would be passed in as 50 basis points.
     * @param transferable True if a member can initiate a transfer of all or a portion of their deposit to another address before the Syndicate begins distributing. Member-initiated transfers may have regulatory concerns (e.g. by allowing a transfer to a non-accredited investor), while manager-initiated transfers are safe for internal bookkeeping purposes. A manager's ability to initiate a transfer is determined by `modifiable` and is independent to `transferable`. True is recommended for Syndicates that want to grant greater control over holdings to its members. False is recommended for Syndicates that are under external regulations that make ownership transfers legally problematic and require manager oversight.
     */
    createSyndicate: {
      (
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        numMembersMax: number | BN | string,
        depositERC20Address: string,
        depositMemberMin: number | BN | string,
        depositMemberMax: number | BN | string,
        depositTotalMax: number | BN | string,
        dateClose: number | BN | string,
        modifiable: boolean,
        allowlistEnabled: boolean,
        transferable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by the current manager to nominate a new managerThe new manager will be pending until they call `managerPendingConfirm()`. This ensures that they have control over their wallet and actively agree to manage the fund.Changing a manager does not change the `syndicateAddress`. The `syndicateAddress` is permanent but has no effect beyond acting as an identifier.To reset a `managerPending` request, just set the `managerPending` to be `address(0)`. This is the default value for all addresses.
     * @param managerPendingAddress The address of the new manager
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetManagerPending: {
      (
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerPendingAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This is a helper function that can be used by a pending manager to simultaneously confirm management of a Syndicate and update the manager fee address. This ensures that there is no gap in setting a new fee address after taking ownership of a Syndicate.
     * @param managerFeeAddress The address where manager fees should be sent.
     * @param syndicateAddress The address of the Syndicate.
     */
    managerPendingConfirmAndSetManagerFeeAddress: {
      (
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by the pending manager to claim current manager statusThe pending manager is identified by `msg.sender`, which proves that they have control over their addressChanging a manager does not change the syndicateAddress. The syndicateAddress is permanent but has no effect beyond acting as an identifier.
     * @param syndicateAddress The address of the Syndicate
     */
    managerPendingConfirm: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to set the address where fees should be sent
     * @param managerFeeAddress The address where manager fees should be sent. This cannot be the current or pending Syndicate manager
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetManagerFeeAddress: {
      (
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerFeeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * In the future, we will include a timelock on all changes to raise fees. Since the current architecture requires trust in a manager because the manager holds the funds, this risk is one that we are willing to accept in the short-term.For the current version of this contract, the management fee must be assessed manually by `managerAssessManagementFee()`. In the future, the management fee will be automatically assessed yearly (or another specified time interval) at the rate specified by `managerManagementFeeBasisPoints` once we support asset management via smart contracts.
     * Used by a manager to set their management and distribution sharesBasis points are fractional units of `store. BASIS_POINTS_DENOMINATOR()` (set to 10000). This means that the max precision of any distribution share is 0.01% (1 basis point).A standard structure would be a 2% management fee (200 basis points) and a 20% distribution share (2000 basis points). For more info, see https://www.investopedia.com/terms/t/two_and_twenty.aspManager fee INCREASES are only accepted while the Syndicate is open; after the Syndicate is closed, fees can only be decreased. This is to prevent managers from changing fees on members without giving them recourse to act on those fee changes (i.e. the opportunity to revoke their deposit).
     * @param managerDistributionShareBasisPoints The percentage of the Syndicate's distributions that will be allocated to the manager. The fee amount must be entered in basis points: for example, a performance fee of 20% of all distributions would be passed in as 2000 basis points.
     * @param managerManagementFeeBasisPoints The management fee of a Syndicate manager, received when the manager calls `managerAssessManagementFee`. In the future, this will be automatically assessed yearly. The fee amount must be passed in basis points: for example, a management fee of 2% per year would be passed in as 200 basis points because the fees are adjusted by BASIS_POINTS_DENOMINATOR, which is set to 10000.
     * @param syndicateAddress The address of the Syndicate to set fees for
     */
    managerSetManagerFees: {
      (
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        managerManagementFeeBasisPoints: number | BN | string,
        managerDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to set Syndicate's distribution shareThe Syndicate distribution share must be at least 0.50% (50 basis points) and at most 100% (10000 basis points) - the manager's distribution share.
     * @param syndicateAddress The address of the Syndicate to set fees for
     * @param syndicateDistributionShareBasisPoints The distributino share that is sent to the Syndicate treasury. All distribution shares are entered in basis points, or fractional units of the BASIS_POINTS_DENOMINATOR (set to 10000). For example, the minimum distribution share of 0.50% should be passed in as 50 basis points (since it is 0.50% * 10000). This means that the max precision is 0.01% (1 basis point).
     */
    managerSetSyndicateDistributionShare: {
      (
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        syndicateDistributionShareBasisPoints: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This function is purely for transparency. A manager could also assess a management fee by transferring assets directly from the manager's wallet to the management fee address, but that can be seen as less transparent because no event is emitted via the Syndicate contract.This management fee currently does **not** leverage `managerManagementFeeBasisPoints` in any way. For now, the manager should calculate and assess the management fee manually based on their agreement with members. In the future, once we have asset management built into our contract, we can assess management fees automatically every year (or other specified time interval).Assessed management fees are not stored in the contract and should instead be reconstructed from the events
     * Used by a manager to assess a management fee. This can be used to compensate a manager (in addition to the distribution share, which is triggered automatically) or to pay expenses for a Syndicate.
     * @param amount The management fee that should be deducted from the Syndicate's holdings of the specified token. Note that this management fee is a specific amount, not a percentage.
     * @param syndicateAddress The address of the Syndicate
     */
    managerAssessManagementFee: {
      (
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        feeERC20Address: string,
        amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Set the maximum members that can contribute to the Syndicate
     * @param numMembersMax The maximum number of members
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetNumMembersMax: {
      (
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        numMembersMax: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This is a helper function that can be used by a manager to freeze deposits from new members (allowing only supplemental deposits from current members) while allowing replacements if existing members drop out.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetNumMembersMaxToCurrent: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to change the close date of a Syndicate.After `dateClose`, member deposits and withdrawals are disabled, but the manager can still reject member deposits or override member deposits (in the case of a modifiable Syndicate). However, distributions cannot be claimed until the Syndicate is closed by a call to `managerCloseSyndicate()`.Until the manager closes the Syndicate to enable distributions, `dateClose` can be pushed into the future, which will reallow member deposits and withdrawals.
     * @param dateClose The new close date, which must be in the future.
     * @param syndicateAddress The address of the Syndicate
     */
    managerSetDateClose: {
      (
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        dateClose: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Closing a Syndicate updates the dateClose to `block.timestamp`. This can be used for calculating management fees or determining how long the Syndicate has been in distribution.
     * Used by a manager to close a Syndicate to new deposits.A Syndicate must be closed before distributions can be enabled. Further, once a Syndicate is closed, it cannot be opened again. This is to prevent issues with redeeming distributions interacting with new deposits (e.g. a user with a 10% stake performs a withdrawal, and then a deposit occurs that dilutes them down to a 1% stake. From that point onward, they would only be entitled to 1% of the distributions).
     * @param syndicateAddress The address of the Syndicate
     */
    managerCloseSyndicate: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Used by a manager to store values within the structThe index of each key must be the same as the index of each value
     * @param metadataKeys The array of keys to store and access the metadata
     * @param metadataValues The arrays of values for metadata to be set
     */
    managerSetMetadata: {
      (
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        metadataKeys: string[],
        metadataValues: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * While testing pre-pend 0x on the first of the hash. That's because the value has to be 32 bytes long in the new layout, like: 0x6c00000000000000000000000000000000000000000000000000000000000000 For More info see https://ethereum.stackexchange.com/questions/17094/how-to-store-ipfs-hash-using-bytes32
     * Emit an event that references a memo stored as 64 byte hash.IPFS is recommended. Opted for the `SHA256` hash.This can be used to store a fund thesis or describe a transaction that a fund manager made in their wallet. This provides transparency by notifying members of transactions and allowing them to verify the proper use of funds.
     * @param hashFunction The hash function being used ie 0x20, 256-bits long
     * @param hashSize The hash size being used in our case 32 bytes
     * @param hexadecimalHash Hexadecimal hash
     * @param syndicateAddress The address of the Syndicate
     */
    managerEmitMemo: {
      (
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        hexadecimalHash: string,
        hashFunction: number | BN | string,
        hashSize: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
