/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SyndicateClosedEndFundGetterLogicV0Contract
  extends Truffle.Contract<SyndicateClosedEndFundGetterLogicV0Instance> {
  "new"(
    owner: string,
    storeAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SyndicateClosedEndFundGetterLogicV0Instance>;
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface SyndicateFeeAddressUpdated {
  name: "SyndicateFeeAddressUpdated";
  args: {
    contractFeeAddress: string;
    0: string;
  };
}

type AllEvents = OwnershipTransferred | SyndicateFeeAddressUpdated;

export interface SyndicateClosedEndFundGetterLogicV0Instance
  extends Truffle.ContractInstance {
  BASIS_POINTS_DENOMINATOR(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  /**
   * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
   * getter function for syndicate fee address.
   */
  getSyndicateFeeAddress(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  /**
   * Renounce ownership of the contract
   */
  ownerRenounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * set a new fee address for the contract function that can only be triggered by the contract owner.
   * @param feeAddress The owner's new contract fee address
   */
  ownerSetSyndicateFeeAddress: {
    (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      feeAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Transfers ownership to the provided address.
   * @param newOwner The new owner's address.
   */
  ownerTransferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  /**
   * This function **must** be kept up to date with the web3 UI when making changes. All PRs that change this function or the SyndicateValues struct **must** be coordinated with an engineer on the Web3 Dashboard.
   * Get the values for a Syndicate
   * @param syndicateAddress The address of the Syndicate
   */
  getSyndicateValues(
    syndicateAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    managerCurrent: string;
    managerPending: string;
    managerFeeAddress: string;
    managerManagementFeeBasisPoints: BN;
    managerDistributionShareBasisPoints: BN;
    syndicateDistributionShareBasisPoints: BN;
    numMembersMax: BN;
    numMembersCurrent: BN;
    depositERC20Address: string;
    depositMemberMin: BN;
    depositMemberMax: BN;
    depositTotalMax: BN;
    depositTotal: BN;
    dateCreated: BN;
    dateClose: BN;
    open: boolean;
    distributing: boolean;
    modifiable: boolean;
    allowlistEnabled: boolean;
    transferable: boolean;
  }>;

  /**
   * This function **must** be kept up to date with the Web3 UI when making changes. All PRs that change this function **must** be coordinated with an engineer on the Web3 Dashboard.
   * Get the member info for a SyndicateTo get the claimed distributions for another ERC20, use `getDistributionClaimedMember()`
   * @param memberAddress The address of the member whose info is being queried
   * @param syndicateAddress The address of the Syndicate
   */
  getMemberInfo(
    syndicateAddress: string,
    memberAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    deposit: BN;
    distributionClaimedDepositERC20: BN;
    isAllowlisted: boolean;
  }>;

  /**
   * Get the manager info.
   * @param managerAddress The address of the manager whose info is being queried
   */
  getManagerInfo(
    managerAddress: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  /**
   * Get the metadata for a given key within a Syndicate
   * @param metadataKey The string that is the key of the metadata to look up
   * @param syndicateAddress The address of the Syndicate
   */
  getMetadata(
    syndicateAddress: string,
    metadataKey: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  methods: {
    BASIS_POINTS_DENOMINATOR(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    /**
     * This function is needed to allow inheriting contracts to only be able to view but not change syndicateFeeAddress without going through ownerSetSyndicateFeeAddress
     * getter function for syndicate fee address.
     */
    getSyndicateFeeAddress(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    /**
     * Renounce ownership of the contract
     */
    ownerRenounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * set a new fee address for the contract function that can only be triggered by the contract owner.
     * @param feeAddress The owner's new contract fee address
     */
    ownerSetSyndicateFeeAddress: {
      (feeAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        feeAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Transfers ownership to the provided address.
     * @param newOwner The new owner's address.
     */
    ownerTransferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    /**
     * This function **must** be kept up to date with the web3 UI when making changes. All PRs that change this function or the SyndicateValues struct **must** be coordinated with an engineer on the Web3 Dashboard.
     * Get the values for a Syndicate
     * @param syndicateAddress The address of the Syndicate
     */
    getSyndicateValues(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      managerCurrent: string;
      managerPending: string;
      managerFeeAddress: string;
      managerManagementFeeBasisPoints: BN;
      managerDistributionShareBasisPoints: BN;
      syndicateDistributionShareBasisPoints: BN;
      numMembersMax: BN;
      numMembersCurrent: BN;
      depositERC20Address: string;
      depositMemberMin: BN;
      depositMemberMax: BN;
      depositTotalMax: BN;
      depositTotal: BN;
      dateCreated: BN;
      dateClose: BN;
      open: boolean;
      distributing: boolean;
      modifiable: boolean;
      allowlistEnabled: boolean;
      transferable: boolean;
    }>;

    /**
     * This function **must** be kept up to date with the Web3 UI when making changes. All PRs that change this function **must** be coordinated with an engineer on the Web3 Dashboard.
     * Get the member info for a SyndicateTo get the claimed distributions for another ERC20, use `getDistributionClaimedMember()`
     * @param memberAddress The address of the member whose info is being queried
     * @param syndicateAddress The address of the Syndicate
     */
    getMemberInfo(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      deposit: BN;
      distributionClaimedDepositERC20: BN;
      isAllowlisted: boolean;
    }>;

    /**
     * Get the manager info.
     * @param managerAddress The address of the manager whose info is being queried
     */
    getManagerInfo(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    /**
     * Get the metadata for a given key within a Syndicate
     * @param metadataKey The string that is the key of the metadata to look up
     * @param syndicateAddress The address of the Syndicate
     */
    getMetadata(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
