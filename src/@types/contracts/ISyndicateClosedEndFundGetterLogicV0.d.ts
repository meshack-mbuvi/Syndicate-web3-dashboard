/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ISyndicateClosedEndFundGetterLogicV0Contract
  extends Truffle.Contract<ISyndicateClosedEndFundGetterLogicV0Instance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ISyndicateClosedEndFundGetterLogicV0Instance>;
}

type AllEvents = never;

export interface ISyndicateClosedEndFundGetterLogicV0Instance
  extends Truffle.ContractInstance {
  getSyndicateValues: {
    (syndicateAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      managerCurrent: string;
      managerPending: string;
      managerFeeAddress: string;
      managerManagementFeeBasisPoints: BN;
      managerDistributionShareBasisPoints: BN;
      syndicateDistributionShareBasisPoints: BN;
      numMembersMax: BN;
      numMembersCurrent: BN;
      depositERC20Address: string;
      depositMemberMin: BN;
      depositMemberMax: BN;
      depositTotalMax: BN;
      depositTotal: BN;
      dateCreated: BN;
      dateClose: BN;
      open: boolean;
      distributing: boolean;
      modifiable: boolean;
      allowlistEnabled: boolean;
      transferable: boolean;
    }>;
    sendTransaction(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMemberInfo: {
    (
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      deposit: BN;
      distributionClaimedDepositERC20: BN;
      isAllowlisted: boolean;
    }>;
    sendTransaction(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      memberAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getManagerInfo: {
    (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      managerAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMetadata: {
    (
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      syndicateAddress: string,
      metadataKey: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getSyndicateValues: {
      (
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        managerCurrent: string;
        managerPending: string;
        managerFeeAddress: string;
        managerManagementFeeBasisPoints: BN;
        managerDistributionShareBasisPoints: BN;
        syndicateDistributionShareBasisPoints: BN;
        numMembersMax: BN;
        numMembersCurrent: BN;
        depositERC20Address: string;
        depositMemberMin: BN;
        depositMemberMax: BN;
        depositTotalMax: BN;
        depositTotal: BN;
        dateCreated: BN;
        dateClose: BN;
        open: boolean;
        distributing: boolean;
        modifiable: boolean;
        allowlistEnabled: boolean;
        transferable: boolean;
      }>;
      sendTransaction(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMemberInfo: {
      (
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        deposit: BN;
        distributionClaimedDepositERC20: BN;
        isAllowlisted: boolean;
      }>;
      sendTransaction(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        memberAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getManagerInfo: {
      (managerAddress: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        managerAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMetadata: {
      (
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        syndicateAddress: string,
        metadataKey: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
